//D flipflop 

module dff{output reg q,qb, input d, clk,clear};
  always @{posedge clk or nogedge clear}
    if (clear==1'b0)
      begin q<=1'b0; qb<1'b1;
      end
  else
    begin q<=d; qb<=~d; end
endmodule

dff uut {
  .q{q}, .qb{qb}, .d{d}, .clk{clk}, .clear{clear} };

intial begin
  //intialize input
  d= 1'b0;
  clk= 1'b1;
end
always #2 d=d+1'b;
initial #10 clear=1'b0;
always #5 clk=~clk;
initial $monitor{"time=%g,d=%b,clk=%b,clear=%b", $time,d,clk,clear};
initial #100 $finish;
endmodule


//T ff
module T_flipflop (
  input clk, rst_n,
  input t,
  output reg q,
  output q_bar
  );
  
  // always@(posedge clk or negedge rst_n) // for asynchronous reset
  always@(posedge clk) begin // for synchronous reset
    if(!rst_n) q <= 0;
    else begin
      q <= (t?~q:q);
    end
  end
  assign q_bar = ~q;
endmodule

module tff{output reg q, qbar, input t, clk, clr;
always @ {posedge clk}
if {clr==1'b1}
begin q<1'b0; qbar<=1'b1; end
else if {t==1'b0}
begin q<=q; qbar<=qbar; end
else
begin q<=qbar; qbar<=q; end
endmodule

//unit under test
tff uut{
    .q{q}
    .qbar{qbar},
    .t{t}
    .clk{clk}
    .clr{clr}
    };
}
  initial 
    begin
    t=o;
    clk=0;
    clr=1;
     
    end
    always #1 clk=~clk;
    always #2 t=~t;
    initial #10 clr=1'b0;
    initial #100 ;
    $finish;
endmodule

// cpp

#include <iostream>

class FlipFlop {
protected:
    bool Q;
    bool Q_not;
public:
    FlipFlop() : Q(false), Q_not(true) {}
    virtual void clock(bool set, bool reset, bool clock, bool data) = 0;
    void displayOutput() const {
        std::cout << "Q = " << Q << ", Q' = " << Q_not << std::endl;
    }
};

class DFlipFlop : public FlipFlop {
public:
    void clock(bool set, bool reset, bool clock, bool data) override {
        if (reset) {
            Q = false;
            Q_not = true;
  } else if (set) {
            Q = true;
            Q_not = false;
        } else if (clock) {
            Q = data;
            Q_not = !data;
        }
    }
};

class TFlipFlop : public FlipFlop {
public:
    void clock(bool set, bool reset, bool clock, bool data) override {
        if (reset) {
            Q = false;
            Q_not = true;
        } else if (set) {
            Q = true;
            Q_not = false;
        } else if (clock && data) {
            Q = !Q;
            Q_not = !Q_not;
        }
    }
};
class FlipFlopSimulator {
public:
    void simulate() {
        int choice;
        bool set, reset, clock, data;

        std::cout << "Select Flip-Flop type:\n1. D Flip-Flop\n2. T Flip-Flop\n";
        std::cin >> choice;

        std::cout << "Enter set input (0 or 1): ";
        std::cin >> set;
        std::cout << "Enter reset input (0 or 1): ";
        std::cin >> reset;
        std::cout << "Enter clock input (0 or 1): ";
        std::cin >> clock;
        std::cout << "Enter data input (0 or 1): ";
        std::cin >> data;

        if (choice == 1) {
            DFlipFlop dFlipFlop;
            std::cout << "Simulating D Flip-Flop..." << std::endl;
            dFlipFlop.clock(set, reset, clock, data);
            dFlipFlop.displayOutput();
        } else if (choice == 2) {
            TFlipFlop tFlipFlop;
            std::cout << "Simulating T Flip-Flop..." << std::endl;
            tFlipFlop.clock(set, reset, clock, data);
            tFlipFlop.displayOutput();
        } else {
            std::cout << "Invalid choice!" << std::endl;
        }
    }
};

int main() {
    FlipFlopSimulator simulator;
    simulator.simulate();
    return 0;
}
